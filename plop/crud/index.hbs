<template>
  <div class="page-container">
    <!--    查询-->
    <query-panel ref="queryPanel" :show="queryForm.show">
      <el-form @submit.native.prevent ref="queryForm" :model="queryForm.query" :inline="true">
        <el-form-item label="名字" prop="name">
          <el-input
                  v-model="queryForm.query.name"
                  placeholder="请输入名字"
                  clearable maxlength="100"
                  show-word-limit
                  @keyup.enter.native="handleQuery"
                  @clear="handleQuery"
          />
        </el-form-item>
        <el-form-item>
          <el-button type="primary" icon="el-icon-search" @click="handleQuery">
            搜索
          </el-button>
          <el-button
                  type="success"
                  icon="el-icon-refresh"
                  @click="handleQueryReset"
          >
            重置
          </el-button>
        </el-form-item>
      </el-form>
    </query-panel>
    <!--    表格顶部操作栏-->
    <toolbar
            ref="tableBar"
            :selections="table.selections"
            :show-search="queryForm.show"
            :is-exporting="tableBar.exportLoading"
            :left-span="18"
            :save-perm="['sys:{{name}}:save']"
            :update-perm="['sys:{{name}}:update']"
            :delete-perm="['sys:{{name}}:delete']"
            :export-perm="['sys:{{name}}:export']"
            @save="handleSave"
            @update="handleUpdate"
            @refresh="getListData(true)"
            @toggle-search="toggleQueryForm"
            @excel-export="handleExcelExport"
            @csv-export="handleCSVExport"
    ></toolbar>
    <!--    分页表格-->
    <list-panel>
      <!--        表格-->
      <el-table
              ref="table"
              v-loading="table.loading"
              element-loading-text="加载中,请稍后..."
              :data="table.items"
              fit
              highlight-current-row
              @selection-change="onTableSelectionChange"
              @sort-change="onTableSortChange"
      >
        <el-table-column type="selection"></el-table-column>
        <el-table-column label="序号">
          <template #default="scope">
            \{{ scope.$index + 1 }}
          </template>
        </el-table-column>
        <el-table-column
                prop="id"
                label="ID"
                show-overflow-tooltip
        ></el-table-column>
        <el-table-column
                prop="name"
                label="名字"
                show-overflow-tooltip
        ></el-table-column>
        <el-table-column label="操作">
          <template #default="{ row }">
            <el-button type="text" @click="handleUpdate(row)">修改</el-button>
            <el-popconfirm
                    icon="el-icon-info"
                    icon-color="red"
                    title="确定删除吗？"
                    class="ml10"
                    @confirm="handleDelete(row)"
            >
              <el-button slot="reference" type="text" class="color-danger">
                删除
              </el-button>
            </el-popconfirm>
          </template>
        </el-table-column>
      </el-table>
      <!--        分页-->
      <pagination
              hide-on-single-page
              :total="table.total"
              :page.sync="queryForm.query.page"
              :size.sync="queryForm.query.size"
              :auto-scroll="false"
              @pagination="getListData"
              @size-change="getListData(true)"
      />
    </list-panel>
    <save ref="save" @ok="getListData(true)"></save>
    <update ref="update" @ok="getListData(true)"></update>
  </div>
</template>

<script>
  import {get{{upperFirst name}}List} from "@/api/{{name}}";
  import ExportCSV from "@/vendor/ExportCSV";
  import Save from "./Save";
  import Update from "./Update";

  export default {
    //名字与路由里面名字对应，则可keep-alve页面缓存
    //name: "{{upperFirst name}}",
    //组件注册
    components: {Save, Update},
    //指令注册
    directives: {},
    data() {
      //数据
      return {
        //查询表单
        queryForm: {
          //默认是否显示搜索表单区域
          show: true,
          //查询条件
          //查询条件和分页参数
          query: {
            ...this.$config.pager.default,
            name: "",
          },
        },
        //表格
        table: {
          loading: false,
          //选中的记录
          selections: [],
          items: [],
          total: 0,
        },
        //table bar
        tableBar: {
          //导出按钮状态，用以显示导出按钮的loading状态标识
          exportLoading: false,
        },
      };
    },
    //计算属性
    computed: {},
    //监听属性
    watch: {},
    //创建完成
    created() {
      this.getListData();
    },
    //挂载完成
    mounted() {
    },
    //创建之前
    beforeCreate() {
    },
    //挂载之前
    beforeMount() {
    },
    //更新之前
    beforeUpdate() {
    },
    //更新之后
    updated() {
    },
    //销毁之前
    beforeDestroy() {
    },
    //销毁完成
    destroyed() {
    },
    //页面激活,
    activated() {
    },
    //方法
    methods: {
      //显示隐藏查询表单
      toggleQueryForm() {
        this.queryForm.show = !this.queryForm.show;
      },
      //表格数据选择事件
      onTableSelectionChange(selection) {
        this.table.selections = selection;
      },
      //表格排序
      onTableSortChange(sort) {
        this.queryForm.query = this.$config.pager.getSort(
                this.queryForm.query,
                sort
        );
      },
      //查询
      handleQuery() {
        this.getListData(true);
      },
      //查询条件重置
      handleQueryReset() {
        this.$refs.queryForm.resetFields();
        this.getListData(true);
      },
      //新增
      handleSave(row) {
        this.$refs["save"].show(row);
      },
      //修改
      handleUpdate(row) {
        let id, title;
        if (row && row.id) {
          id = row.id;
          title = row.name;
        } else {
          id = this.table.selections[0].id;
          title = this.table.selections[0].name;
        }
        if (!id) {
          this.$baseNotify("请选择要修改的记录");
          return;
        }
        this.$refs["update"].show({
          title: "修改:" + title,
          id: id,
        });
      },
      //删除
      handleDelete(row) {
        this.deleteById({
          id: row && row.id ? row.id : this.table.selections[0].id,
        });
      },
      //导出CSV
      handleCSVExport() {
        const filterVal = [
          {
            prop: "id",
            label: "序号",
          },
          {
            prop: "name",
            label: "名字",
          },
        ];
        //这里可以对数据首先进行字典值翻译
        // let data = this.table.items.map((d) => {});
        ExportCSV(this.table.items, filterVal, "导出数据列表");
      },
      //导出Excel，请根据实际情况配置导出信息
      handleExcelExport() {
        if (this.table.selections.length) {
          this.tableBar.exportLoading = true;
          import("@/vendor/Export2Excel").then((excel) => {
            const tHeader = ["序号", "名字"];
            const filterVal = ["id", "name"];
            const list = this.table.selections;
            const data = this.formatJson(filterVal, list);
            excel.export_json_to_excel({
              header: tHeader,
              data,
              filename: "导出数据列表",
            });
            this.$refs.table.clearSelection();
            this.tableBar.exportLoading = false;
          });
        } else {
          this.$baseMessage("请选择要导出的数据");
        }
      },
      //格式化待导出excel的json数据为二维数组
      formatJson(filterVal, jsonData) {
        return jsonData.map((v) => filterVal.map((j) => v[j]));
      },
      //查询列表数据
      async getListData(reload = false) {
        if (reload === true) {
          this.queryForm.query.page = 1;
        }
        this.table.loading = true;
        get{{upperFirst name}}List(this.queryForm.query)
                .then((res) => {
                  this.table.items = res.data.records;
                  this.table.total = Number(res.data.totalCount);
                  this.table.loading = false;
                })
                .catch((err) => {
                  this.table.loading = false;
                });
      },
      /////待实现
      async deleteById(param) {
        if (param && param.id) {
          console.log("调用ajax删除", param);
          this.$baseNotify("已删除");
        } else {
          this.$baseNotify("错误:id is null");
        }
      },
    },
  };
</script>
